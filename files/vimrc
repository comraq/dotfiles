"------- Basic Settings -------"

"Set the style for syntax highlighting to be suited for dark backgrounds
set background=dark "bg

"Customizing search options/preferences
set hlsearch "hls
set incsearch "is
set ignorecase "ic

"Show line numbers at the very left of the vim buffer
set number "nu

"Apply auto line breaks at 80 characters and apply it with formatoptions
set textwidth=76 "tw

"Set Tab to 2 spaces
set expandtab "et
set tabstop=2 "ts

"Set Indent to 2 spaces
set shiftwidth=2 "sw

"Set Autoindent
set autoindent "ai


filetype plugin indent on

set omnifunc=syntaxcomplete#complete

"Auto Highlights Trailing Whitespace:
"- in red color
"- upon opening new buffers
"- no highlight while in insert mode
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()





"------- Custom Mappings -------"

" Let backslash be leader
let mapleader = " "

" Trims Trailing Whitespaces
cnoremap trsp %s/\s\+$//g<cr>``

" 'evc' in command mode to tabedit vimrc
cnoremap evc tabedit $MYVIMRC<cr>
cnoremap svc :source $MYVIMRC<cr>

" Wraps highlighted text in visual mode, currently has:
" -> single quotes '
" -> double quotes "
" -> square brackets [ or ]
" -> round brackets ( or )
" -> curly brackets { or }
" -> angle brackets < or >
vnoremap <leader>" <esc>`>a"<esc>`<i"<esc>
vnoremap <leader>' <esc>`>a'<esc>`<i'<esc>
vnoremap <leader>( <esc>`>a)<esc>`<i(<esc>
vnoremap <leader>) <esc>`>a)<esc>`<i(<esc>
vnoremap <leader>[ <esc>`>a]<esc>`<i[<esc>
vnoremap <leader>] <esc>`>a]<esc>`<i[<esc>
vnoremap <leader>< <esc>`>a><esc>`<i<<esc>
vnoremap <leader>> <esc>`>a><esc>`<i<<esc>
vnoremap <leader>{ <esc>`>a}<esc>`<i{<esc>
vnoremap <leader>} <esc>`>a}<esc>`<i{<esc>

" Deletes wrapping delimiters:
nnoremap <leader>d" di"hPl2x
nnoremap <leader>d' di'hPl2x
nnoremap <leader>d( di(hPl2x
nnoremap <leader>d) di(hPl2x
nnoremap <leader>d[ di[hPl2x
nnoremap <leader>d] di[hPl2x
nnoremap <leader>d< di<hPl2x
nnoremap <leader>d> di<hPl2x
nnoremap <leader>d{ di{hPl2x
nnoremap <leader>d} di{hPl2x

" Replaces wrapping delimiters:
nnoremap <leader>"' di"hi''<esc>P2l2x
nnoremap <leader>"( di"hi()<esc>P2l2x
nnoremap <leader>") di"hi()<esc>P2l2x
nnoremap <leader>"[ di"hi[]<esc>P2l2x
nnoremap <leader>"] di"hi[]<esc>P2l2x
nnoremap <leader>"< di"hi<><esc>P2l2x
nnoremap <leader>"> di"hi<><esc>P2l2x
nnoremap <leader>"{ di"hi{}<esc>P2l2x
nnoremap <leader>"} di"hi{}<esc>P2l2x

nnoremap <leader>'" di'hi""<esc>P2l2x
nnoremap <leader>'( di'hi()<esc>P2l2x
nnoremap <leader>') di'hi()<esc>P2l2x
nnoremap <leader>'[ di'hi[]<esc>P2l2x
nnoremap <leader>'] di'hi[]<esc>P2l2x
nnoremap <leader>'< di'hi<><esc>P2l2x
nnoremap <leader>'> di'hi<><esc>P2l2x
nnoremap <leader>'{ di'hi{}<esc>P2l2x
nnoremap <leader>'} di'hi{}<esc>P2l2x

nnoremap <leader>(' di(hi''<esc>P2l2x
nnoremap <leader>(" di(hi""<esc>P2l2x
nnoremap <leader>([ di(hi[]<esc>P2l2x
nnoremap <leader>(] di(hi[]<esc>P2l2x
nnoremap <leader>(< di(hi<><esc>P2l2x
nnoremap <leader>(> di(hi<><esc>P2l2x
nnoremap <leader>({ di(hi{}<esc>P2l2x
nnoremap <leader>(} di(hi{}<esc>P2l2x
nnoremap <leader>)' di(hi''<esc>P2l2x
nnoremap <leader>)" di(hi""<esc>P2l2x
nnoremap <leader>)[ di(hi[]<esc>P2l2x
nnoremap <leader>)] di(hi[]<esc>P2l2x
nnoremap <leader>)< di(hi<><esc>P2l2x
nnoremap <leader>)> di(hi<><esc>P2l2x
nnoremap <leader>){ di(hi{}<esc>P2l2x
nnoremap <leader>)} di(hi{}<esc>P2l2x

nnoremap <leader>[' di[hi''<esc>P2l2x
nnoremap <leader>[" di[hi""<esc>P2l2x
nnoremap <leader>[( di[hi()<esc>P2l2x
nnoremap <leader>[) di[hi()<esc>P2l2x
nnoremap <leader>[< di[hi<><esc>P2l2x
nnoremap <leader>[> di[hi<><esc>P2l2x
nnoremap <leader>[{ di[hi{}<esc>P2l2x
nnoremap <leader>[} di[hi{}<esc>P2l2x
nnoremap <leader>]' di[hi''<esc>P2l2x
nnoremap <leader>]" di[hi""<esc>P2l2x
nnoremap <leader>]( di[hi()<esc>P2l2x
nnoremap <leader>]) di[hi()<esc>P2l2x
nnoremap <leader>]< di[hi<><esc>P2l2x
nnoremap <leader>]> di[hi<><esc>P2l2x
nnoremap <leader>]{ di[hi{}<esc>P2l2x
nnoremap <leader>]} di[hi{}<esc>P2l2x

nnoremap <leader><' di<hi''<esc>P2l2x
nnoremap <leader><" di<hi""<esc>P2l2x
nnoremap <leader><( di<hi()<esc>P2l2x
nnoremap <leader><) di<hi()<esc>P2l2x
nnoremap <leader><[ di<hi[]<esc>P2l2x
nnoremap <leader><] di<hi[]<esc>P2l2x
nnoremap <leader><{ di<hi{}<esc>P2l2x
nnoremap <leader><} di<hi{}<esc>P2l2x
nnoremap <leader>>' di<hi''<esc>P2l2x
nnoremap <leader>>" di<hi""<esc>P2l2x
nnoremap <leader>>( di<hi()<esc>P2l2x
nnoremap <leader>>) di<hi()<esc>P2l2x
nnoremap <leader>>[ di<hi[]<esc>P2l2x
nnoremap <leader>>] di<hi[]<esc>P2l2x
nnoremap <leader>>{ di<hi{}<esc>P2l2x
nnoremap <leader>>} di<hi{}<esc>P2l2x

nnoremap <leader>{' di{hi''<esc>P2l2x
nnoremap <leader>{" di{hi""<esc>P2l2x
nnoremap <leader>{( di{hi()<esc>P2l2x
nnoremap <leader>{) di{hi()<esc>P2l2x
nnoremap <leader>{[ di{hi[]<esc>P2l2x
nnoremap <leader>{] di{hi[]<esc>P2l2x
nnoremap <leader>{< di{hi<><esc>P2l2x
nnoremap <leader>{> di{hi<><esc>P2l2x
nnoremap <leader>}' di{hi''<esc>P2l2x
nnoremap <leader>}" di{hi""<esc>P2l2x
nnoremap <leader>}( di{hi()<esc>P2l2x
nnoremap <leader>}) di{hi()<esc>P2l2x
nnoremap <leader>}[ di{hi[]<esc>P2l2x
nnoremap <leader>}] di{hi[]<esc>P2l2x
nnoremap <leader>}< di{hi<><esc>P2l2x
nnoremap <leader>}> di{hi<><esc>P2l2x





"------- Spelling AutoCorrect Abbreviations -------

iabbrev funciton function





"------- Pathogen -------"

execute pathogen#infect()



" haskell-vim
let g:haskell_indent_disable = 1



" GHCMod Shortcuts
nnoremap <LEADER>hti :GhcModTypeInsert<CR>
nnoremap <LEADER>hsc :GhcModSplitFunCase<CR>
nnoremap <LEADER>htt :GhcModType<CR>
nnoremap <LEADER>htc :GhcModTypeClear<CR>



" NecoGHC For Haskell OmniCompletion
let g:haskellmode_completion_ghc = 1
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc



"Vim-Racket
let g:syntastic_enable_racket_racket_checker = 1



"JsDoc Plugin Configurations
let g:jsdoc_enable_es6 = 1
let g:jsdoc_allow_input_prompt = 0
let g:jsdoc_input_description = 0
let g:jsdoc_additional_descriptions = 1
let g:jsdoc_access_descriptions = 2
let g:jsdoc_underscore_private = 1
let g:jsdoc_param_description_separator = ' - '



"Enables HTML/CSS syntax highlighting in your JavaScript file
let g:javascript_enable_domhtmlcss = 1



"Allow JSX syntax for .js extension files
let g:jsx_ext_required = 0



" Syntastic
nnoremap <Leader>s :SyntasticToggleMode<CR>

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

let g:syntastic_javascript_checkers = ['eslint']

" Override eslint with local version where necessary.
let local_eslint = finddir('node_modules', '.;') . '/.bin/eslint'

if matchstr(local_eslint, "^\/\\w") == ''
  let local_eslint = getcwd() . "/" . local_eslint
endif

if executable(local_eslint)
  let g:syntastic_javascript_eslint_exec = local_eslint
endif



" Indent Line
let g:indentLine_fileTypeExclude = ['']
let g:indentLine_color_term = 7 " See :help cterm-colors for more NR-8 Colors
let g:indentLine_concealcursor = ""



" vim-latex
" IMPORTANT: grep will sometimes skip displaying the file name if you
" " search in a singe file. This will confuse Latex-Suite. Set your grep
" " program to always generate a file-name.
set grepprg=grep\ -nH\ $*

" OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
" 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" " The following changes the default filetype back to 'tex':
let g:tex_flavor='latex'

" Compile latex, make glossaries, then compile latex again
nnoremap <leader>lm :!here=$(pwd); cd %:p:h; latex --interaction=nonstopmode %:p; makeglossaries %:p:r; latex --interaction=nonstopmode %:p; cd $here<CR><esc>

" Compile latex to pdf
nnoremap <leader>lpdf :TTarget<CR><BS><BS><BS>pdf<CR>

let g:Tex_FormatDependency_pdf = 'dvi,ps,pdf'
let g:Tex_CompileRule_ps = 'dvips -Ppdf -o $*.ps $*.dvi'
let g:Tex_CompileRule_pdf = 'ps2pdf $*.ps'
let g:Tex_SmartKeyQuote = 0


"JSX Plugin   - https://github.com/mxw/vim-jsx
"JS Plugin    - https://github.com/pangloss/vim-javascript
"TS Plugin    - https://github.com/leafgarland/typescript-vim
"JsDOC Plugin - https://github.com/heavenshell/vim-jsdoc
"Syntastic    - https://github.com/scrooloose/syntastic
"haskell-vim  - https://github.com/neovimhaskell/haskell-vim
"Indent Line  - https://github.com/Yggdroot/indentLine
"vimproc      - https://github.com/Shougo/vimproc.vim
"ghcmod-vim   - https://github.com/eagletmt/ghcmod-vim
"neco-ghc     - https://github.com/eagletmt/neco-ghc
"vim-racket   - https://github.com/wlangstroth/vim-racket
"vim-latex    - https://github.com/vim-latex/vim-latex

"Useful reference - https://jaxbot.me/articles/setting-up-vim-for-react-js-jsx-02-03-2015
